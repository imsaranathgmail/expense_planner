// Mocks generated by Mockito 5.3.2 from annotations
// in expense_planner/test/lib/features/expense_planner/presentation/bloc/currency_bloc/currency_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:expense_planner/features/expense_planner/domain/entities/currency/currency_type_entity.dart'
    as _i5;
import 'package:expense_planner/features/expense_planner/domain/repositories/currency/currency_type_repositroy.dart'
    as _i2;
import 'package:expense_planner/features/expense_planner/domain/usecases/currency/currency_type_usecase.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeCurrencyTypeRepository_0 extends _i1.SmartFake
    implements _i2.CurrencyTypeRepository {
  _FakeCurrencyTypeRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AddCurrencyTypeUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockAddCurrencyTypeUsecase extends _i1.Mock
    implements _i3.AddCurrencyTypeUsecase {
  MockAddCurrencyTypeUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.CurrencyTypeRepository get currencyTypeRepository => (super.noSuchMethod(
        Invocation.getter(#currencyTypeRepository),
        returnValue: _FakeCurrencyTypeRepository_0(
          this,
          Invocation.getter(#currencyTypeRepository),
        ),
      ) as _i2.CurrencyTypeRepository);
  @override
  _i4.Future<bool> execute(_i5.CurrencyTypeEntity? currencyTypeEntity) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [currencyTypeEntity],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);
}

/// A class which mocks [UpdateCurrencyTypeUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockUpdateCurrencyTypeUsecase extends _i1.Mock
    implements _i3.UpdateCurrencyTypeUsecase {
  MockUpdateCurrencyTypeUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.CurrencyTypeRepository get currencyTypeRepository => (super.noSuchMethod(
        Invocation.getter(#currencyTypeRepository),
        returnValue: _FakeCurrencyTypeRepository_0(
          this,
          Invocation.getter(#currencyTypeRepository),
        ),
      ) as _i2.CurrencyTypeRepository);
  @override
  _i4.Future<bool> execute(_i5.CurrencyTypeEntity? currencyTypeEntity) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [currencyTypeEntity],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);
}

/// A class which mocks [FetchCurrencyTypeUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockFetchCurrencyTypeUsecase extends _i1.Mock
    implements _i3.FetchCurrencyTypeUsecase {
  MockFetchCurrencyTypeUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.CurrencyTypeRepository get currencyTypeRepository => (super.noSuchMethod(
        Invocation.getter(#currencyTypeRepository),
        returnValue: _FakeCurrencyTypeRepository_0(
          this,
          Invocation.getter(#currencyTypeRepository),
        ),
      ) as _i2.CurrencyTypeRepository);
  @override
  _i4.Future<List<_i5.CurrencyTypeEntity>> execute() => (super.noSuchMethod(
        Invocation.method(
          #execute,
          [],
        ),
        returnValue: _i4.Future<List<_i5.CurrencyTypeEntity>>.value(
            <_i5.CurrencyTypeEntity>[]),
      ) as _i4.Future<List<_i5.CurrencyTypeEntity>>);
}
